"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Dolittle. All rights reserved.
*  Licensed under the MIT License. See LICENSE in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const slash_1 = __importDefault(require("slash"));
const internal_1 = require("../../internal");
class WallabySettings {
    constructor(_wallaby, _project, _setup, _settingsCallback) {
        this._wallaby = _wallaby;
        this._project = _project;
        this._setup = _setup;
        this._settingsCallback = _settingsCallback;
        this.createFiles();
        this.createTests();
        this.createCompilers();
    }
    static get INSTRUMENTED_NODE_MODULES() {
        return [
            'chai',
            'chai-as-promised',
            'sinon',
            'sinon-chai',
            '@dolittle/typescript.build'
        ];
    }
    get settings() {
        const settings = {
            files: this.files,
            tests: this.tests,
            compilers: this.compilers,
            setup: this._setup.setup,
            testFramework: 'mocha',
            env: {
                type: 'node',
                runner: 'node'
            },
        };
        if (typeof this._settingsCallback === 'function')
            this._settingsCallback(this._wallaby, settings);
        return settings;
    }
    get files() {
        if (this._files === undefined)
            this.createFiles();
        return this._files;
    }
    get tests() {
        if (this._tests === undefined)
            this.createTests();
        return this._tests;
    }
    get compilers() {
        if (this._compilers === undefined)
            this.createCompilers();
        return this._compilers;
    }
    createFiles() {
        this._files = [];
        this._files.push(...this.getBaseIgnoredFiles(), ...this.getBaseInstrumentedFiles());
        if (this._project.workspaces.length > 0) {
            this._project.workspaces.forEach(_ => this._files.push(...this.getFilesFromSources(_.sources)));
        }
        else
            this._files.push(...this.getFilesFromSources(this._project.sources));
    }
    createTests() {
        this._tests = this.getBaseIgnoredFiles();
        if (this._project.workspaces.length > 0) {
            this._project.workspaces.forEach(_ => this._tests.push(...this.getTestsFromSources(_.sources)));
        }
        else
            this._tests.push(...this.getTestsFromSources(this._project.sources));
    }
    getFilesFromSources(sources) {
        const files = [];
        const sourceRoot = this.pathAsRelativeGlobFromRoot(sources.sourceFiles.root);
        const outputRoot = this.pathAsRelativeGlobFromRoot(sources.outputFiles.root);
        files.push({ pattern: `${outputRoot}/**/*`, ignore: true });
        files.push({ pattern: `${sourceRoot}/**/for_*/**/!(given)/*.@(ts|js)`, ignore: true });
        files.push({ pattern: `${sourceRoot}/**/for_*/*.@(ts|js)`, ignore: true });
        files.push({ pattern: `${sourceRoot}/**/for_*/**/given/*.@(ts|js)`, instrument: false });
        files.push({ pattern: `${sourceRoot}/**/*.@(ts|js)` });
        return files;
    }
    getTestsFromSources(sources) {
        const files = [];
        const sourceRoot = this.pathAsRelativeGlobFromRoot(sources.sourceFiles.root);
        const outputRoot = this.pathAsRelativeGlobFromRoot(sources.outputFiles.root);
        files.push({ pattern: `${outputRoot}/**/*`, ignore: true });
        files.push({ pattern: `${sourceRoot}/**/for_*/**/given/*.@(ts|js)`, ignore: true });
        files.push({ pattern: `${sourceRoot}/**/for_*/*.@(ts|js)` });
        files.push({ pattern: `${sourceRoot}/**/for_*/**/!(given)/*.@(ts|js)` });
        return files;
    }
    createCompilers() {
        this._compilers = {
            '**/*.@(js|ts)': this._wallaby.compilers.typeScript({
                module: 'commonjs',
                downlevelIteration: true,
                allowJs: true,
                experimentalDecorators: true,
                esModuleInterop: true,
                target: 'es6'
            })
        };
    }
    getBaseInstrumentedFiles() {
        const baseFiles = [{ pattern: 'package.json', instrument: false }];
        if (this._project.workspaces.length > 0) {
            this._project.workspaces.forEach(_ => {
                const root = this.pathAsRelativeGlobFromRoot(_.sources.root);
                baseFiles.push({ pattern: `${root}/package.json`, instrument: false });
            });
        }
        return baseFiles.concat(WallabySettings.INSTRUMENTED_NODE_MODULES.map(_ => {
            return { pattern: `node_modules/${_}`, instrument: false };
        }));
    }
    getBaseIgnoredFiles() {
        const baseFiles = [];
        if (this._project.workspaces.length > 0) {
            this._project.workspaces.forEach(_ => {
                const root = this.pathAsRelativeGlobFromRoot(_.sources.root);
                baseFiles.push({ pattern: `${root}/node_modules`, ignore: true });
                if (_.workspacePackage.usesWebpack()) {
                    internal_1.SourceFiles.getWebpackSpecificExcludes(_.workspacePackage).forEach(pattern => {
                        baseFiles.push({ pattern: `${root}/${pattern}`, ignore: true });
                    });
                }
            });
        }
        else {
            const rootPackage = this._project.rootPackage;
            if (rootPackage.usesWebpack()) {
                internal_1.SourceFiles.getWebpackSpecificExcludes(rootPackage).forEach(pattern => {
                    baseFiles.push({ pattern, ignore: true });
                });
            }
        }
        const scopedPackages = WallabySettings.INSTRUMENTED_NODE_MODULES.filter(_ => _.startsWith('@'));
        const unscopedPackages = WallabySettings.INSTRUMENTED_NODE_MODULES.filter(_ => !_.startsWith('@'));
        baseFiles.push({ pattern: `node_modules/!(${unscopedPackages.join('|')})`, ignore: true });
        scopedPackages.forEach(_ => {
            const splitPackage = _.split('/');
            const scope = splitPackage[0], packageName = splitPackage[1];
            baseFiles.push({ pattern: `node_modules/${scope}/!(${packageName})`, ignore: true });
        });
        return baseFiles;
    }
    pathAsRelativeGlobFromRoot(path) {
        path = slash_1.default(path);
        const root = slash_1.default(this._project.sources.root);
        return root === path ? '.' : path.replace(`${root}/`, '');
    }
}
exports.WallabySettings = WallabySettings;
//# sourceMappingURL=data:application/json;base64,