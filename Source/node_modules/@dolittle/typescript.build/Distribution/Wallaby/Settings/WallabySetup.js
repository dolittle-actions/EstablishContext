"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class WallabySetup {
    constructor(_w, _project, _setupCallback) {
        this._w = _w;
        this._project = _project;
        this._setupCallback = _setupCallback;
    }
    get setup() {
        if (this._setup === undefined)
            this._setup = this.getSetupFunction();
        return this._setup;
    }
    getFunctionBody(func) {
        const entire = func.toString();
        const body = entire.substring(entire.indexOf('{') + 1, entire.lastIndexOf('}'));
        return body;
    }
    getSetupFunction() {
        const setup = (wallaby) => {
            process.env.IS_TESTING = true;
            const Project = require('@dolittle/typescript.build').Project;
            const project = new Project(process.cwd());
            if (project.workspaces.length > 0) {
                const aliases = {};
                project.workspaces.forEach((workspace) => {
                    const packageObject = workspace.workspacePackage.packageObject;
                    const rootFolder = workspace.workspacePackage.rootFolder;
                    aliases[packageObject.name] = rootFolder;
                });
                require('module-alias').addAliases(aliases);
            }
            global.expect = chai.expect;
            const should = chai.should();
            global.sinon = require('sinon');
            const sinonChai = require('sinon-chai');
            const chaiAsPromised = require('chai-as-promised');
            chai.use(sinonChai);
            chai.use(chaiAsPromised);
            global.mock = require('@fluffy-spoon/substitute').Substitute;
        };
        if (typeof this._setupCallback === 'function') {
            const setupBody = this.getFunctionBody(setup);
            const setupCallbackBody = this.getFunctionBody(this._setupCallback);
            const combined = setupBody + '\n' + setupCallbackBody;
            const newFunction = new Function(combined);
            return newFunction;
        }
        return setup;
    }
}
exports.WallabySetup = WallabySetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FsbGFieVNldHVwLmpzIiwic291cmNlUm9vdCI6Ii4vU291cmNlLyIsInNvdXJjZXMiOlsiV2FsbGFieS9TZXR0aW5ncy9XYWxsYWJ5U2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxNQUFhLFlBQVk7SUFJckIsWUFBb0IsRUFBTyxFQUFVLFFBQWlCLEVBQVUsY0FBOEI7UUFBMUUsT0FBRSxHQUFGLEVBQUUsQ0FBSztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVM7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRWxHLElBQUksS0FBSztRQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVPLGVBQWUsQ0FBQyxJQUFjO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNoRixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFSyxnQkFBZ0I7UUFDcEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUMxQixPQUFPLENBQUMsR0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzlELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBRTNDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBYyxFQUFFLEVBQUU7b0JBQzFDLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7b0JBQy9ELE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7b0JBQ3pELE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQy9DO1lBRUEsTUFBYyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM1QixNQUFjLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDeEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRXhCLE1BQWMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsVUFBVSxDQUFDO1FBQzFFLENBQUMsQ0FBQztRQUVGLElBQUksT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLFVBQVUsRUFBRTtZQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDcEUsTUFBTSxRQUFRLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUN0RCxNQUFNLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxPQUFPLFdBQXFDLENBQUM7U0FDaEQ7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0o7QUF0REQsb0NBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogIENvcHlyaWdodCAoYykgRG9saXR0bGUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gJy4uLy4uL2ludGVybmFsJztcblxuZXhwb3J0IHR5cGUgU2V0dXBDYWxsYmFjayA9ICh3OiBhbnkpID0+IHZvaWQ7XG5cblxuZXhwb3J0IGNsYXNzIFdhbGxhYnlTZXR1cCB7XG5cbiAgICBwcml2YXRlIF9zZXR1cCE6ICh3YWxsYWJ5OiBhbnkpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF93OiBhbnksIHByaXZhdGUgX3Byb2plY3Q6IFByb2plY3QsIHByaXZhdGUgX3NldHVwQ2FsbGJhY2s/OiBTZXR1cENhbGxiYWNrKSB7fVxuXG4gICAgZ2V0IHNldHVwKCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0dXAgPT09IHVuZGVmaW5lZCkgdGhpcy5fc2V0dXAgPSB0aGlzLmdldFNldHVwRnVuY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHVwO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RnVuY3Rpb25Cb2R5KGZ1bmM6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGVudGlyZSA9IGZ1bmMudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgYm9keSA9IGVudGlyZS5zdWJzdHJpbmcoZW50aXJlLmluZGV4T2YoJ3snKSArIDEsIGVudGlyZS5sYXN0SW5kZXhPZignfScpKTtcbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICB9XG5cbiAgICBwcml2YXRlIGdldFNldHVwRnVuY3Rpb24oKTogKHdhbGxhYnk6IGFueSkgPT4gdm9pZCB7XG4gICAgICAgIGNvbnN0IHNldHVwID0gKHdhbGxhYnk6IGFueSkgPT4ge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52IGFzIGFueSkuSVNfVEVTVElORyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBQcm9qZWN0ID0gcmVxdWlyZSgnQGRvbGl0dGxlL3R5cGVzY3JpcHQuYnVpbGQnKS5Qcm9qZWN0O1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KHByb2Nlc3MuY3dkKCkpO1xuXG4gICAgICAgICAgICBpZiAocHJvamVjdC53b3Jrc3BhY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGlhc2VzOiBhbnkgPSB7fTtcbiAgICAgICAgICAgICAgICBwcm9qZWN0LndvcmtzcGFjZXMuZm9yRWFjaCgod29ya3NwYWNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFja2FnZU9iamVjdCA9IHdvcmtzcGFjZS53b3Jrc3BhY2VQYWNrYWdlLnBhY2thZ2VPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RGb2xkZXIgPSB3b3Jrc3BhY2Uud29ya3NwYWNlUGFja2FnZS5yb290Rm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICBhbGlhc2VzW3BhY2thZ2VPYmplY3QubmFtZV0gPSByb290Rm9sZGVyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJ21vZHVsZS1hbGlhcycpLmFkZEFsaWFzZXMoYWxpYXNlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIChnbG9iYWwgYXMgYW55KS5leHBlY3QgPSBjaGFpLmV4cGVjdDtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG4gICAgICAgICAgICAoZ2xvYmFsIGFzIGFueSkuc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xuICAgICAgICAgICAgY29uc3Qgc2lub25DaGFpID0gcmVxdWlyZSgnc2lub24tY2hhaScpO1xuICAgICAgICAgICAgY29uc3QgY2hhaUFzUHJvbWlzZWQgPSByZXF1aXJlKCdjaGFpLWFzLXByb21pc2VkJyk7XG4gICAgICAgICAgICBjaGFpLnVzZShzaW5vbkNoYWkpO1xuICAgICAgICAgICAgY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG4gICAgICAgICAgICAoZ2xvYmFsIGFzIGFueSkubW9jayA9IHJlcXVpcmUoJ0BmbHVmZnktc3Bvb24vc3Vic3RpdHV0ZScpLlN1YnN0aXR1dGU7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zZXR1cENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzZXR1cEJvZHkgPSB0aGlzLmdldEZ1bmN0aW9uQm9keShzZXR1cCk7XG4gICAgICAgICAgICBjb25zdCBzZXR1cENhbGxiYWNrQm9keSA9IHRoaXMuZ2V0RnVuY3Rpb25Cb2R5KHRoaXMuX3NldHVwQ2FsbGJhY2spO1xuICAgICAgICAgICAgY29uc3QgY29tYmluZWQgPSBzZXR1cEJvZHkgKyAnXFxuJyArIHNldHVwQ2FsbGJhY2tCb2R5O1xuICAgICAgICAgICAgY29uc3QgbmV3RnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oY29tYmluZWQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0Z1bmN0aW9uIGFzICh3YWxsYWJ5OiBhbnkpID0+IHZvaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2V0dXA7XG4gICAgfVxufVxuIl19