"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const gulp_1 = __importDefault(require("gulp"));
const gulp_tslint_1 = __importDefault(require("gulp-tslint"));
const GulpTasks_1 = require("./GulpTasks");
class LintTasks {
    constructor(_context) {
        this._context = _context;
    }
    /**
     * The task for linting
     *
     * @readonly
     */
    get lintTask() {
        if (this._lintTask === undefined) {
            this._lintTask = this.createLintTask(false);
        }
        return this._lintTask;
    }
    /**
     * The task for linting and fixing
     *
     * @readonly
     */
    get lintFixTask() {
        if (this._lintFixTask === undefined) {
            this._lintFixTask = this.createLintTask(true);
        }
        return this._lintFixTask;
    }
    /**
     * Gets all the tasks
     *
     * @readonly
     */
    get allTasks() {
        return [this.lintTask, this.lintFixTask];
    }
    createLintTask(fix) {
        const task = GulpTasks_1.createTask(this._context, fix ? 'lint-fix' : 'lint', true, workspace => {
            const projectSources = workspace !== undefined ? workspace.sources : this._context.project.sources;
            const tsLintConfigPath = workspace ? workspace.tsLint : this._context.project.tsLint;
            const sourceFiles = projectSources.sourceFiles.sourceFileGlobs.includes.map(_ => _.absolute);
            const excludedSourceFiles = projectSources.sourceFiles.sourceFileGlobs.excludes.map(_ => _.absolute);
            return done => gulp_1.default.src(sourceFiles.concat(excludedSourceFiles.map(_ => '!' + _)))
                .pipe(gulp_tslint_1.default({
                formatter: 'verbose',
                fix,
                configuration: tsLintConfigPath
            }))
                .pipe(gulp_tslint_1.default.report({
                summarizeFailureOutput: true
            }))
                .on('end', done);
        });
        return task;
    }
}
exports.LintTasks = LintTasks;
function getLintTasks(context) {
    if (LintTasks.lintTasks === undefined)
        LintTasks.lintTasks = new LintTasks(context);
    return LintTasks.lintTasks;
}
exports.getLintTasks = getLintTasks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGludFRhc2tzLmpzIiwic291cmNlUm9vdCI6Ii4vU291cmNlLyIsInNvdXJjZXMiOlsiR3VscC9UYXNrcy9MaW50VGFza3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O2dHQUdnRztBQUNoRyxnREFBd0I7QUFDeEIsOERBQXFDO0FBR3JDLDJDQUF5QztBQUd6QyxNQUFhLFNBQVM7SUFZbEIsWUFBb0IsUUFBcUI7UUFBckIsYUFBUSxHQUFSLFFBQVEsQ0FBYTtJQUFHLENBQUM7SUFFN0M7Ozs7T0FJRztJQUNILElBQUksUUFBUTtRQUNSLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxXQUFXO1FBQ1gsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLFFBQVE7UUFDUixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVPLGNBQWMsQ0FBQyxHQUFZO1FBQy9CLE1BQU0sSUFBSSxHQUFHLHNCQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRTtZQUNoRixNQUFNLGNBQWMsR0FBRyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDbkcsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNyRixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdGLE1BQU0sbUJBQW1CLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM3RSxJQUFJLENBQUMscUJBQVUsQ0FBQztnQkFDYixTQUFTLEVBQUUsU0FBUztnQkFDcEIsR0FBRztnQkFDSCxhQUFhLEVBQUUsZ0JBQWdCO2FBQ2xDLENBQUMsQ0FBQztpQkFDRixJQUFJLENBQUMscUJBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3BCLHNCQUFzQixFQUFFLElBQUk7YUFDL0IsQ0FBQyxDQUFDO2lCQUNGLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBRUo7QUFuRUQsOEJBbUVDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLE9BQW9CO0lBQzdDLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxTQUFTO1FBQUUsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDL0IsQ0FBQztBQUhELG9DQUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IGd1bHAgZnJvbSAnZ3VscCc7XG5pbXBvcnQgZ3VscFRzbGludCBmcm9tICdndWxwLXRzbGludCc7XG5pbXBvcnQgeyBUYXNrRnVuY3Rpb24gfSBmcm9tICd1bmRlcnRha2VyJztcbmltcG9ydCB7IEd1bHBDb250ZXh0IH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgY3JlYXRlVGFzayB9IGZyb20gJy4vR3VscFRhc2tzJztcblxuXG5leHBvcnQgY2xhc3MgTGludFRhc2tzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHtMaW50VGFza3N9XG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge0xpbnRUYXNrc31cbiAgICAgKi9cbiAgICBzdGF0aWMgbGludFRhc2tzOiBMaW50VGFza3M7XG5cbiAgICBwcml2YXRlIF9saW50VGFzayE6IFRhc2tGdW5jdGlvbjtcbiAgICBwcml2YXRlIF9saW50Rml4VGFzayE6IFRhc2tGdW5jdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbnRleHQ6IEd1bHBDb250ZXh0KSB7fVxuXG4gICAgLyoqXG4gICAgICogVGhlIHRhc2sgZm9yIGxpbnRpbmdcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCBsaW50VGFzaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbnRUYXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbnRUYXNrID0gdGhpcy5jcmVhdGVMaW50VGFzayhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbnRUYXNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXNrIGZvciBsaW50aW5nIGFuZCBmaXhpbmdcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCBsaW50Rml4VGFzaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbnRGaXhUYXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbnRGaXhUYXNrID0gdGhpcy5jcmVhdGVMaW50VGFzayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGludEZpeFRhc2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgdGhlIHRhc2tzXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgYWxsVGFza3MoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5saW50VGFzaywgdGhpcy5saW50Rml4VGFza107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVMaW50VGFzayhmaXg6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgdGFzayA9IGNyZWF0ZVRhc2sodGhpcy5fY29udGV4dCwgZml4ID8gJ2xpbnQtZml4JyA6ICdsaW50JywgdHJ1ZSwgd29ya3NwYWNlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RTb3VyY2VzID0gd29ya3NwYWNlICE9PSB1bmRlZmluZWQgPyB3b3Jrc3BhY2Uuc291cmNlcyA6IHRoaXMuX2NvbnRleHQucHJvamVjdC5zb3VyY2VzO1xuICAgICAgICAgICAgY29uc3QgdHNMaW50Q29uZmlnUGF0aCA9IHdvcmtzcGFjZSA/IHdvcmtzcGFjZS50c0xpbnQgOiB0aGlzLl9jb250ZXh0LnByb2plY3QudHNMaW50O1xuICAgICAgICAgICAgY29uc3Qgc291cmNlRmlsZXMgPSBwcm9qZWN0U291cmNlcy5zb3VyY2VGaWxlcy5zb3VyY2VGaWxlR2xvYnMuaW5jbHVkZXMubWFwKF8gPT4gXy5hYnNvbHV0ZSk7XG4gICAgICAgICAgICBjb25zdCBleGNsdWRlZFNvdXJjZUZpbGVzID0gcHJvamVjdFNvdXJjZXMuc291cmNlRmlsZXMuc291cmNlRmlsZUdsb2JzLmV4Y2x1ZGVzLm1hcChfID0+IF8uYWJzb2x1dGUpO1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUgPT4gZ3VscC5zcmMoc291cmNlRmlsZXMuY29uY2F0KGV4Y2x1ZGVkU291cmNlRmlsZXMubWFwKF8gPT4gJyEnICsgXykpKVxuICAgICAgICAgICAgICAgIC5waXBlKGd1bHBUc2xpbnQoe1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICd2ZXJib3NlJyxcbiAgICAgICAgICAgICAgICAgICAgZml4LFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uOiB0c0xpbnRDb25maWdQYXRoXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnBpcGUoZ3VscFRzbGludC5yZXBvcnQoe1xuICAgICAgICAgICAgICAgICAgICBzdW1tYXJpemVGYWlsdXJlT3V0cHV0OiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLm9uKCdlbmQnLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXNrO1xuICAgIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGludFRhc2tzKGNvbnRleHQ6IEd1bHBDb250ZXh0KSB7XG4gICAgaWYgKExpbnRUYXNrcy5saW50VGFza3MgPT09IHVuZGVmaW5lZCkgTGludFRhc2tzLmxpbnRUYXNrcyA9IG5ldyBMaW50VGFza3MoY29udGV4dCk7XG4gICAgcmV0dXJuIExpbnRUYXNrcy5saW50VGFza3M7XG59XG4iXX0=