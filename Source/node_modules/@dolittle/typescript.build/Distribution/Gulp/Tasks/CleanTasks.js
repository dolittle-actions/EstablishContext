"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const del_1 = __importDefault(require("del"));
const slash_1 = __importDefault(require("slash"));
const internal_1 = require("../../internal");
class CleanTasks {
    constructor(_context) {
        this._context = _context;
    }
    get cleanTask() {
        if (this._cleanTask === undefined) {
            this._cleanTask = internal_1.createTask(this._context, 'clean', true, workspace => {
                const projectSources = workspace !== undefined ? workspace.sources : this._context.project.sources;
                return done => {
                    const outputFolder = projectSources.outputFiles.root;
                    return del_1.default(outputFolder)
                        .then(_ => done())
                        .catch(error => done(error));
                };
            });
        }
        return this._cleanTask;
    }
    get testsCleanTask() {
        if (this._testsCleanTask === undefined) {
            this._testsCleanTask = internal_1.createTask(this._context, 'test-clean', true, workspace => {
                const projectSources = workspace !== undefined ? workspace.sources : this._context.project.sources;
                return done => del_1.default(`${slash_1.default(projectSources.outputFiles.root)}/**/for_*`).then(_ => done()).catch(error => done(error));
            });
        }
        return this._testsCleanTask;
    }
    get allTasks() {
        return [this.cleanTask, this.testsCleanTask];
    }
}
exports.CleanTasks = CleanTasks;
function getCleanTasks(context) {
    if (CleanTasks.cleanTasks === undefined)
        CleanTasks.cleanTasks = new CleanTasks(context);
    return CleanTasks.cleanTasks;
}
exports.getCleanTasks = getCleanTasks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xlYW5UYXNrcy5qcyIsInNvdXJjZVJvb3QiOiIuL1NvdXJjZS8iLCJzb3VyY2VzIjpbIkd1bHAvVGFza3MvQ2xlYW5UYXNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Z0dBR2dHO0FBQ2hHLDhDQUFzQjtBQUV0QixrREFBK0I7QUFDL0IsNkNBQXlEO0FBRXpELE1BQWEsVUFBVTtJQU1uQixZQUFvQixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQUcsQ0FBQztJQUU3QyxJQUFJLFNBQVM7UUFDVCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcscUJBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUcsU0FBUyxDQUFDLEVBQUU7Z0JBQ3BFLE1BQU0sY0FBYyxHQUFHLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDbkcsT0FBTyxJQUFJLENBQUMsRUFBRTtvQkFDVixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLElBQUssQ0FBQztvQkFDdEQsT0FBTyxhQUFHLENBQUMsWUFBWSxDQUFDO3lCQUNuQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzt5QkFDakIsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksY0FBYztRQUNkLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7WUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxxQkFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDN0UsTUFBTSxjQUFjLEdBQUcsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNuRyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBRyxDQUFDLEdBQUcsZUFBVSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakksQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQXRDRCxnQ0FzQ0M7QUFFRCxTQUFnQixhQUFhLENBQUMsT0FBb0I7SUFDOUMsSUFBSSxVQUFVLENBQUMsVUFBVSxLQUFLLFNBQVM7UUFBRSxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pGLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQztBQUNqQyxDQUFDO0FBSEQsc0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgRG9saXR0bGUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgZGVsIGZyb20gJ2RlbCc7XG5pbXBvcnQgeyBUYXNrRnVuY3Rpb24gfSBmcm9tICd1bmRlcnRha2VyJztcbmltcG9ydCB0b1VuaXhQYXRoIGZyb20gJ3NsYXNoJztcbmltcG9ydCB7IEd1bHBDb250ZXh0LCBjcmVhdGVUYXNrIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwnO1xuXG5leHBvcnQgY2xhc3MgQ2xlYW5UYXNrcyB7XG4gICAgc3RhdGljIGNsZWFuVGFza3M6IENsZWFuVGFza3M7XG5cbiAgICBwcml2YXRlIF90ZXN0c0NsZWFuVGFzayE6IFRhc2tGdW5jdGlvbjtcbiAgICBwcml2YXRlIF9jbGVhblRhc2shOiBUYXNrRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb250ZXh0OiBHdWxwQ29udGV4dCkge31cblxuICAgIGdldCBjbGVhblRhc2soKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbGVhblRhc2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY2xlYW5UYXNrID0gY3JlYXRlVGFzayh0aGlzLl9jb250ZXh0LCAnY2xlYW4nLCB0cnVlLCAgd29ya3NwYWNlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0U291cmNlcyA9IHdvcmtzcGFjZSAhPT0gdW5kZWZpbmVkID8gd29ya3NwYWNlLnNvdXJjZXMgOiB0aGlzLl9jb250ZXh0LnByb2plY3Quc291cmNlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dEZvbGRlciA9IHByb2plY3RTb3VyY2VzLm91dHB1dEZpbGVzLnJvb3QhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVsKG91dHB1dEZvbGRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKF8gPT4gZG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IGRvbmUoZXJyb3IpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fY2xlYW5UYXNrO1xuICAgIH1cblxuICAgIGdldCB0ZXN0c0NsZWFuVGFzaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Rlc3RzQ2xlYW5UYXNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlc3RzQ2xlYW5UYXNrID0gY3JlYXRlVGFzayh0aGlzLl9jb250ZXh0LCAndGVzdC1jbGVhbicsIHRydWUsIHdvcmtzcGFjZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdFNvdXJjZXMgPSB3b3Jrc3BhY2UgIT09IHVuZGVmaW5lZCA/IHdvcmtzcGFjZS5zb3VyY2VzIDogdGhpcy5fY29udGV4dC5wcm9qZWN0LnNvdXJjZXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUgPT4gZGVsKGAke3RvVW5peFBhdGgocHJvamVjdFNvdXJjZXMub3V0cHV0RmlsZXMucm9vdCEpfS8qKi9mb3JfKmApLnRoZW4oXyA9PiBkb25lKCkpLmNhdGNoKGVycm9yID0+IGRvbmUoZXJyb3IpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rlc3RzQ2xlYW5UYXNrO1xuICAgIH1cblxuICAgIGdldCBhbGxUYXNrcygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmNsZWFuVGFzaywgdGhpcy50ZXN0c0NsZWFuVGFza107XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xlYW5UYXNrcyhjb250ZXh0OiBHdWxwQ29udGV4dCkge1xuICAgIGlmIChDbGVhblRhc2tzLmNsZWFuVGFza3MgPT09IHVuZGVmaW5lZCkgQ2xlYW5UYXNrcy5jbGVhblRhc2tzID0gbmV3IENsZWFuVGFza3MoY29udGV4dCk7XG4gICAgcmV0dXJuIENsZWFuVGFza3MuY2xlYW5UYXNrcztcbn1cbiJdfQ==