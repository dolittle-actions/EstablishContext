"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gulp_1 = __importDefault(require("gulp"));
const internal_1 = require("../../internal");
class GulpTasks {
    constructor(_context) {
        this._context = _context;
    }
    get cleanTasks() {
        return internal_1.getCleanTasks(this._context);
    }
    get lintTasks() {
        return internal_1.getLintTasks(this._context);
    }
    get buildTasks() {
        return internal_1.getBuildTasks(this._context);
    }
    get testTasks() {
        return internal_1.getTestTasks(this._context);
    }
    get allTasks() {
        return [...this.cleanTasks.allTasks, ...this.lintTasks.allTasks, ...this.buildTasks.allTasks, ...this.testTasks.allTasks];
    }
}
function getGulpTasks(context) {
    if (GulpTasks.gulpTask === undefined)
        GulpTasks.gulpTask = new GulpTasks(context);
    return GulpTasks.gulpTask;
}
exports.getGulpTasks = getGulpTasks;
function createTask(context, taskName, parallel, createTaskCallback) {
    let task;
    if (context.project.workspaces.length > 0) {
        const workspaceTasks = [];
        context.project.workspaces.forEach(_ => {
            const workspaceTask = createTaskCallback(_);
            workspaceTask.displayName = `${taskName}:${_.workspacePackage.packageObject.name}`;
            workspaceTasks.push(workspaceTask);
        });
        task = parallel ? gulp_1.default.parallel(workspaceTasks) : gulp_1.default.series(workspaceTasks);
        task.displayName = taskName;
    }
    else {
        task = createTaskCallback();
        task.displayName = taskName;
    }
    return task;
}
exports.createTask = createTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VscFRhc2tzLmpzIiwic291cmNlUm9vdCI6Ii4vU291cmNlLyIsInNvdXJjZXMiOlsiR3VscC9UYXNrcy9HdWxwVGFza3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxnREFBd0I7QUFDeEIsNkNBQXNIO0FBRXRILE1BQU0sU0FBUztJQUdYLFlBQW9CLFFBQXFCO1FBQXJCLGFBQVEsR0FBUixRQUFRLENBQWE7SUFBRyxDQUFDO0lBRTdDLElBQUksVUFBVTtRQUNWLE9BQU8sd0JBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sdUJBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sd0JBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sdUJBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUgsQ0FBQztDQUNKO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLE9BQW9CO0lBQzdDLElBQUksU0FBUyxDQUFDLFFBQVEsS0FBSyxTQUFTO1FBQUUsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsRixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDOUIsQ0FBQztBQUhELG9DQUdDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE9BQW9CLEVBQUUsUUFBZ0IsRUFBRSxRQUFpQixFQUFFLGtCQUErRDtJQUNqSixJQUFJLElBQWtCLENBQUM7SUFDdkIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZDLE1BQU0sY0FBYyxHQUFtQixFQUFFLENBQUM7UUFDMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sYUFBYSxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxRQUFRLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuRixjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQztLQUMvQjtTQUNJO1FBQ0QsSUFBSSxHQUFHLGtCQUFrQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7S0FDL0I7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBbEJELGdDQWtCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBEb2xpdHRsZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRhc2tGdW5jdGlvbiB9IGZyb20gJ3VuZGVydGFrZXInO1xuaW1wb3J0IGd1bHAgZnJvbSAnZ3VscCc7XG5pbXBvcnQgeyBHdWxwQ29udGV4dCwgZ2V0Q2xlYW5UYXNrcywgZ2V0QnVpbGRUYXNrcywgZ2V0VGVzdFRhc2tzLCBZYXJuV29ya3NwYWNlLCBnZXRMaW50VGFza3MgfSBmcm9tICcuLi8uLi9pbnRlcm5hbCc7XG5cbmNsYXNzIEd1bHBUYXNrcyB7XG4gICAgc3RhdGljIGd1bHBUYXNrOiBHdWxwVGFza3M7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb250ZXh0OiBHdWxwQ29udGV4dCkge31cblxuICAgIGdldCBjbGVhblRhc2tzKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q2xlYW5UYXNrcyh0aGlzLl9jb250ZXh0KTtcbiAgICB9XG5cbiAgICBnZXQgbGludFRhc2tzKCkge1xuICAgICAgICByZXR1cm4gZ2V0TGludFRhc2tzKHRoaXMuX2NvbnRleHQpO1xuICAgIH1cblxuICAgIGdldCBidWlsZFRhc2tzKCkge1xuICAgICAgICByZXR1cm4gZ2V0QnVpbGRUYXNrcyh0aGlzLl9jb250ZXh0KTtcbiAgICB9XG5cbiAgICBnZXQgdGVzdFRhc2tzKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGVzdFRhc2tzKHRoaXMuX2NvbnRleHQpO1xuICAgIH1cblxuICAgIGdldCBhbGxUYXNrcygpIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmNsZWFuVGFza3MuYWxsVGFza3MsIC4uLnRoaXMubGludFRhc2tzLmFsbFRhc2tzLCAuLi50aGlzLmJ1aWxkVGFza3MuYWxsVGFza3MsIC4uLnRoaXMudGVzdFRhc2tzLmFsbFRhc2tzXTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHdWxwVGFza3MoY29udGV4dDogR3VscENvbnRleHQpIHtcbiAgICBpZiAoR3VscFRhc2tzLmd1bHBUYXNrID09PSB1bmRlZmluZWQpIEd1bHBUYXNrcy5ndWxwVGFzayA9IG5ldyBHdWxwVGFza3MoY29udGV4dCk7XG4gICAgcmV0dXJuIEd1bHBUYXNrcy5ndWxwVGFzaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhc2soY29udGV4dDogR3VscENvbnRleHQsIHRhc2tOYW1lOiBzdHJpbmcsIHBhcmFsbGVsOiBib29sZWFuLCBjcmVhdGVUYXNrQ2FsbGJhY2s6ICh3b3Jrc3BhY2U/OiBZYXJuV29ya3NwYWNlKSA9PiBUYXNrRnVuY3Rpb24pIHtcbiAgICBsZXQgdGFzazogVGFza0Z1bmN0aW9uO1xuICAgIGlmIChjb250ZXh0LnByb2plY3Qud29ya3NwYWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHdvcmtzcGFjZVRhc2tzOiBUYXNrRnVuY3Rpb25bXSA9IFtdO1xuICAgICAgICBjb250ZXh0LnByb2plY3Qud29ya3NwYWNlcy5mb3JFYWNoKF8gPT4ge1xuICAgICAgICAgICAgY29uc3Qgd29ya3NwYWNlVGFzayA9IGNyZWF0ZVRhc2tDYWxsYmFjayhfKTtcbiAgICAgICAgICAgIHdvcmtzcGFjZVRhc2suZGlzcGxheU5hbWUgPSBgJHt0YXNrTmFtZX06JHtfLndvcmtzcGFjZVBhY2thZ2UucGFja2FnZU9iamVjdC5uYW1lfWA7XG4gICAgICAgICAgICB3b3Jrc3BhY2VUYXNrcy5wdXNoKHdvcmtzcGFjZVRhc2spO1xuICAgICAgICB9KTtcbiAgICAgICAgdGFzayA9IHBhcmFsbGVsID8gZ3VscC5wYXJhbGxlbCh3b3Jrc3BhY2VUYXNrcykgOiBndWxwLnNlcmllcyh3b3Jrc3BhY2VUYXNrcyk7XG4gICAgICAgIHRhc2suZGlzcGxheU5hbWUgPSB0YXNrTmFtZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhc2sgPSBjcmVhdGVUYXNrQ2FsbGJhY2soKTtcbiAgICAgICAgdGFzay5kaXNwbGF5TmFtZSA9IHRhc2tOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiB0YXNrO1xufVxuIl19