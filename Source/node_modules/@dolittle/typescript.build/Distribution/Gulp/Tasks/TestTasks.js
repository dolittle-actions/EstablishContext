"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const gulp_1 = __importDefault(require("gulp"));
const gulp_mocha_1 = __importDefault(require("gulp-mocha"));
const internal_1 = require("../../internal");
class TestTasks {
    constructor(_context) {
        this._context = _context;
    }
    get runTestsTask() {
        if (this._runTestsTask === undefined) {
            this._runTestsTask = internal_1.createTask(this._context, 'test-run', false, workspace => {
                const projectSources = workspace !== undefined ? workspace.sources : this._context.project.sources;
                const compiledTests = projectSources.outputFiles.compiledTestsGlobs.includes.map(_ => _.absolute);
                const excludedCompiledTests = projectSources.outputFiles.compiledTestsGlobs.excludes.map(_ => _.absolute);
                return done => gulp_1.default.src(compiledTests.concat(excludedCompiledTests.map(_ => '!' + _)), { read: false })
                    .pipe(gulp_mocha_1.default({ reporter: 'spec', require: ['jsdom-global/register', '@dolittle/typescript.build/mocha.opts',] }))
                    .on('end', done);
            });
        }
        return this._runTestsTask;
    }
    get testTask() {
        if (this._testTask === undefined) {
            this._testTask = gulp_1.default.series(internal_1.getBuildTasks(this._context).buildTask, this.runTestsTask);
            this._testTask.displayName = 'test';
        }
        return this._testTask;
    }
    get allTasks() {
        return [this.testTask, this.runTestsTask];
    }
}
exports.TestTasks = TestTasks;
function getTestTasks(context) {
    if (TestTasks.testTasks === undefined)
        TestTasks.testTasks = new TestTasks(context);
    return TestTasks.testTasks;
}
exports.getTestTasks = getTestTasks;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFRhc2tzLmpzIiwic291cmNlUm9vdCI6Ii4vU291cmNlLyIsInNvdXJjZXMiOlsiR3VscC9UYXNrcy9UZXN0VGFza3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O2dHQUdnRztBQUNoRyxnREFBd0I7QUFDeEIsNERBQW1DO0FBRW5DLDZDQUF3RTtBQUV4RSxNQUFhLFNBQVM7SUFNbEIsWUFBb0IsUUFBcUI7UUFBckIsYUFBUSxHQUFSLFFBQVEsQ0FBYTtJQUFHLENBQUM7SUFFN0MsSUFBSSxZQUFZO1FBQ1osSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLHFCQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUMxRSxNQUFNLGNBQWMsR0FBRyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBQ25HLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbEcsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFHLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUM7cUJBQ3BGLElBQUksQ0FBQyxvQkFBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSx1Q0FBdUMsRUFBRSxFQUFDLENBQUMsQ0FBQztxQkFDakgsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDUixJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBSSxDQUFDLE1BQU0sQ0FDeEIsd0JBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxFQUN0QyxJQUFJLENBQUMsWUFBWSxDQUNwQixDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUVKO0FBcENELDhCQW9DQztBQUVELFNBQWdCLFlBQVksQ0FBQyxPQUFvQjtJQUM3QyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEtBQUssU0FBUztRQUFFLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEYsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQy9CLENBQUM7QUFIRCxvQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBEb2xpdHRsZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCBndWxwIGZyb20gJ2d1bHAnO1xuaW1wb3J0IGd1bHBNb2NoYSBmcm9tICdndWxwLW1vY2hhJztcbmltcG9ydCB7IFRhc2tGdW5jdGlvbiB9IGZyb20gJ3VuZGVydGFrZXInO1xuaW1wb3J0IHsgR3VscENvbnRleHQsIGNyZWF0ZVRhc2ssIGdldEJ1aWxkVGFza3MgfSBmcm9tICcuLi8uLi9pbnRlcm5hbCc7XG5cbmV4cG9ydCBjbGFzcyBUZXN0VGFza3Mge1xuICAgIHN0YXRpYyB0ZXN0VGFza3M6IFRlc3RUYXNrcztcblxuICAgIHByaXZhdGUgX3J1blRlc3RzVGFzayE6IFRhc2tGdW5jdGlvbjtcbiAgICBwcml2YXRlIF90ZXN0VGFzayE6IFRhc2tGdW5jdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbnRleHQ6IEd1bHBDb250ZXh0KSB7fVxuXG4gICAgZ2V0IHJ1blRlc3RzVGFzaygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3J1blRlc3RzVGFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5UZXN0c1Rhc2sgPSBjcmVhdGVUYXNrKHRoaXMuX2NvbnRleHQsICd0ZXN0LXJ1bicsIGZhbHNlLCB3b3Jrc3BhY2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3RTb3VyY2VzID0gd29ya3NwYWNlICE9PSB1bmRlZmluZWQgPyB3b3Jrc3BhY2Uuc291cmNlcyA6IHRoaXMuX2NvbnRleHQucHJvamVjdC5zb3VyY2VzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBpbGVkVGVzdHMgPSBwcm9qZWN0U291cmNlcy5vdXRwdXRGaWxlcy5jb21waWxlZFRlc3RzR2xvYnMuaW5jbHVkZXMubWFwKF8gPT4gXy5hYnNvbHV0ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhjbHVkZWRDb21waWxlZFRlc3RzID0gcHJvamVjdFNvdXJjZXMub3V0cHV0RmlsZXMuY29tcGlsZWRUZXN0c0dsb2JzLmV4Y2x1ZGVzLm1hcChfID0+IF8uYWJzb2x1dGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb25lID0+IGd1bHAuc3JjKGNvbXBpbGVkVGVzdHMuY29uY2F0KGV4Y2x1ZGVkQ29tcGlsZWRUZXN0cy5tYXAoXyA9PiAnIScgKyBfKSksIHtyZWFkOiBmYWxzZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKGd1bHBNb2NoYSh7cmVwb3J0ZXI6ICdzcGVjJywgcmVxdWlyZTogWydqc2RvbS1nbG9iYWwvcmVnaXN0ZXInLCAnQGRvbGl0dGxlL3R5cGVzY3JpcHQuYnVpbGQvbW9jaGEub3B0cycsXX0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oJ2VuZCcsIGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1blRlc3RzVGFzaztcbiAgICB9XG4gICAgZ2V0IHRlc3RUYXNrKCkge1xuICAgICAgICBpZiAodGhpcy5fdGVzdFRhc2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fdGVzdFRhc2sgPSBndWxwLnNlcmllcyhcbiAgICAgICAgICAgICAgICBnZXRCdWlsZFRhc2tzKHRoaXMuX2NvbnRleHQpLmJ1aWxkVGFzayxcbiAgICAgICAgICAgICAgICB0aGlzLnJ1blRlc3RzVGFza1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX3Rlc3RUYXNrLmRpc3BsYXlOYW1lID0gJ3Rlc3QnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXN0VGFzaztcbiAgICB9XG5cbiAgICBnZXQgYWxsVGFza3MoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy50ZXN0VGFzaywgdGhpcy5ydW5UZXN0c1Rhc2tdO1xuICAgIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVzdFRhc2tzKGNvbnRleHQ6IEd1bHBDb250ZXh0KSB7XG4gICAgaWYgKFRlc3RUYXNrcy50ZXN0VGFza3MgPT09IHVuZGVmaW5lZCkgVGVzdFRhc2tzLnRlc3RUYXNrcyA9IG5ldyBUZXN0VGFza3MoY29udGV4dCk7XG4gICAgcmV0dXJuIFRlc3RUYXNrcy50ZXN0VGFza3M7XG59XG4iXX0=