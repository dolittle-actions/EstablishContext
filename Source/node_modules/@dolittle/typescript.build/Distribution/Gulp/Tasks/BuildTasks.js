"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const gulp_1 = __importDefault(require("gulp"));
const gulp_sourcemaps_1 = __importDefault(require("gulp-sourcemaps"));
const gulp_typescript_1 = __importDefault(require("gulp-typescript"));
const internal_1 = require("../../internal");
class BuildTasks {
    constructor(_context) {
        this._context = _context;
    }
    get buildTask() {
        if (this._buildTask === undefined) {
            this._buildTask = this.createBuildTask(true);
        }
        return this._buildTask;
    }
    get buildNoLintTask() {
        if (this._buildNoLintTask === undefined) {
            this._buildNoLintTask = this.createBuildTask(false);
        }
        return this._buildNoLintTask;
    }
    get allTasks() {
        return [this.buildTask, this.buildNoLintTask];
    }
    createBuildTask(lint) {
        let task;
        const taskSeries = [internal_1.getCleanTasks(this._context).cleanTask];
        if (lint)
            taskSeries.push(internal_1.getLintTasks(this._context).lintTask);
        if (this._context.project.workspaces.length > 0)
            taskSeries.push(this.createWorkspacesBuildTask(lint));
        else {
            const projectSources = this._context.project.sources;
            const tsProject = gulp_typescript_1.default.createProject(projectSources.tsConfig);
            const sourceFiles = projectSources.sourceFiles.sourceFileGlobs.includes.map(_ => _.absolute);
            const excludedSourceFiles = projectSources.sourceFiles.sourceFileGlobs.excludes.map(_ => _.absolute);
            const destination = projectSources.outputFiles.root;
            const taskFunction = done => {
                const tsResult = gulp_1.default.src(sourceFiles.concat(excludedSourceFiles.map(_ => '!' + _)))
                    .pipe(gulp_sourcemaps_1.default.init())
                    .pipe(tsProject());
                tsResult.dts
                    .pipe(gulp_1.default.dest(destination));
                return tsResult.js
                    .pipe(gulp_sourcemaps_1.default.write())
                    .pipe(gulp_1.default.dest(destination))
                    .on('end', _ => done())
                    .on('error', err => done(err));
            };
            taskFunction.displayName = `build${lint ? '' : '-no-lint'}:${this._context.project.rootPackage.packageObject.name}`;
            taskSeries.push(taskFunction);
        }
        taskSeries.push(this.createCopyStaticTask());
        task = gulp_1.default.series(...taskSeries);
        task.displayName = `build${lint ? '' : '-no-lint'}`;
        return task;
    }
    createWorkspacesBuildTask(lint) {
        const tasks = [];
        const streams = [];
        this._context.project.workspaces.forEach(workspace => {
            const projectSources = workspace.sources;
            const tsProject = gulp_typescript_1.default.createProject(projectSources.tsConfig);
            const sourceFiles = projectSources.sourceFiles.sourceFileGlobs.includes.map(_ => _.absolute);
            const excludedSourceFiles = projectSources.sourceFiles.sourceFileGlobs.excludes.map(_ => _.absolute);
            const destination = projectSources.outputFiles.root;
            const taskFunction = done => {
                const tsResult = gulp_1.default.src(sourceFiles.concat(excludedSourceFiles.map(_ => '!' + _)))
                    .pipe(gulp_sourcemaps_1.default.init())
                    .pipe(tsProject());
                streams.push({ stream: tsResult.js, dest: destination });
                streams.push({ stream: tsResult.dts, dest: destination });
                tsResult
                    .on('end', _ => done())
                    .on('error', err => done(err));
                return tsResult;
            };
            taskFunction.displayName = `build${lint ? '' : '-no-lint'}:${workspace.workspacePackage.packageObject.name}`;
            tasks.push(taskFunction);
        });
        const writeFilesTask = done => {
            let counter = 0;
            for (const _ of streams) {
                const stream = _.stream
                    .pipe(gulp_1.default.dest(_.dest))
                    .on('end', _ => {
                    counter += 1;
                    if (counter === streams.length)
                        done();
                })
                    .on('error', err => done(err));
            }
        };
        writeFilesTask.displayName = 'build-write-files';
        const parallelBuild = gulp_1.default.parallel(tasks);
        parallelBuild.displayName = 'build-parallel';
        const task = gulp_1.default.series(parallelBuild, writeFilesTask);
        return task;
    }
    createCopyStaticTask() {
        if (this._copyStaticTask === undefined) {
            this._copyStaticTask = internal_1.createTask(this._context, 'copy', true, workspace => {
                const usesWebPack = workspace ? workspace.workspacePackage.usesWebpack() : this._context.project.rootPackage.usesWebpack();
                if (usesWebPack)
                    return done => done();
                const projectSources = workspace !== undefined ? workspace.sources : this._context.project.sources;
                const staticFiles = projectSources.sourceFiles.staticSourceFileGlobs.includes.map(_ => _.absolute);
                const excludedStaticFiles = projectSources.sourceFiles.staticSourceFileGlobs.excludes.map(_ => _.absolute);
                const destination = projectSources.outputFiles.root;
                return done => gulp_1.default.src(staticFiles.concat(excludedStaticFiles.map(_ => '!' + _)))
                    .pipe(gulp_1.default.dest(destination))
                    .on('end', done);
            });
        }
        return this._copyStaticTask;
    }
}
exports.BuildTasks = BuildTasks;
function getBuildTasks(context) {
    if (BuildTasks.buildTasks === undefined)
        BuildTasks.buildTasks = new BuildTasks(context);
    return BuildTasks.buildTasks;
}
exports.getBuildTasks = getBuildTasks;
//# sourceMappingURL=data:application/json;base64,