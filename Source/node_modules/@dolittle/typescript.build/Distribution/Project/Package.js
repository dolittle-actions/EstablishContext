"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Dolittle. All rights reserved.
 *  Licensed under the MIT License. See LICENSE in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const is_valid_path_1 = __importDefault(require("is-valid-path"));
const internal_1 = require("../internal");
/**
 * Represents an npm package
 *
 * @export
 * @class Package
 */
class Package {
    /**
     * Instantiates an instance of {Package}.
     * @param {string} _rootFolder Path to the root of the project containing a package.json file
     * @param {Package} [_parentPackage] The parent {Package} if this {Package} is a yarn workspace
     */
    constructor(rootFolder, _parentPackage) {
        this._parentPackage = _parentPackage;
        if (!is_valid_path_1.default(rootFolder) || !fs_1.default.statSync(rootFolder).isDirectory())
            throw new internal_1.PathIsNotDirectory(rootFolder);
        this.rootFolder = path_1.default.resolve(rootFolder);
        this.path = path_1.default.join(rootFolder, Package.PACKAGE_NAME);
        if (!fs_1.default.existsSync(this.path))
            throw new internal_1.NoPackageJson(this.path);
        this.packageObject = JSON.parse(fs_1.default.readFileSync(this.path));
        const webpackConfigPath = path_1.default.join(this.rootFolder, Package.WEBPACK_CONFIG_NAME);
        if (fs_1.default.existsSync(webpackConfigPath)) {
            this.webpackConfigPath = webpackConfigPath;
        }
    }
    static get PACKAGE_NAME() { return 'package.json'; }
    static get WEBPACK_CONFIG_NAME() { return 'webpack.config.js'; }
    /**
     * Gets the parent package for this yarn workspace
     *
     * @readonly
     */
    get parentPackage() {
        return this._parentPackage;
    }
    /**
     * Whether or not this is yarn workspaces root package
     *
     * @returns
     */
    hasWorkspaces() {
        return this.packageObject.workspaces !== undefined;
    }
    /**
     * Whether or not this package uses webpack
     *
     * @returns
     */
    usesWebpack() {
        return this.webpackConfigPath !== undefined;
    }
}
exports.Package = Package;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFja2FnZS5qcyIsInNvdXJjZVJvb3QiOiIuL1NvdXJjZS8iLCJzb3VyY2VzIjpbIlByb2plY3QvUGFja2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Z0dBR2dHO0FBQ2hHLDRDQUFvQjtBQUNwQixnREFBd0I7QUFDeEIsa0VBQXdDO0FBQ3hDLDBDQUFnRTtBQXVCaEU7Ozs7O0dBS0c7QUFDSCxNQUFhLE9BQU87SUFLaEI7Ozs7T0FJRztJQUNILFlBQVksVUFBa0IsRUFBVSxjQUF3QjtRQUF4QixtQkFBYyxHQUFkLGNBQWMsQ0FBVTtRQUM1RCxJQUFJLENBQUMsdUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFO1lBQ2xFLE1BQU0sSUFBSSw2QkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFlBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN6QixNQUFNLElBQUksd0JBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBUSxDQUFDLENBQUM7UUFFbkUsTUFBTSxpQkFBaUIsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbEYsSUFBSSxZQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQXRCRCxNQUFNLEtBQUssWUFBWSxLQUFLLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLEtBQUssbUJBQW1CLEtBQUksT0FBTyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFtRC9EOzs7O09BSUc7SUFDSCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEtBQUssU0FBUyxDQUFDO0lBQ2hELENBQUM7Q0FDSjtBQWhGRCwwQkFnRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgRG9saXR0bGUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgaXNWYWxpZFBhdGggZnJvbSAnaXMtdmFsaWQtcGF0aCc7XG5pbXBvcnQgeyBOb1BhY2thZ2VKc29uLCBQYXRoSXNOb3REaXJlY3RvcnkgfSBmcm9tICcuLi9pbnRlcm5hbCc7XG5cbmV4cG9ydCB0eXBlIFBhY2thZ2VPYmplY3QgPSB7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgcGFja2FnZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogVmVyc2lvbiBvZiB0aGUgcGFja2FnZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB2ZXJzaW9uOiBzdHJpbmcsXG4gICAgLyoqXG4gICAgICogWWFybiB3b3Jrc3BhY2VzIGZpZWxkXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICovXG4gICAgd29ya3NwYWNlcz86IHN0cmluZ1tdXG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gbnBtIHBhY2thZ2VcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUGFja2FnZVxuICovXG5leHBvcnQgY2xhc3MgUGFja2FnZSB7XG5cbiAgICBzdGF0aWMgZ2V0IFBBQ0tBR0VfTkFNRSgpIHsgcmV0dXJuICdwYWNrYWdlLmpzb24nOyB9XG4gICAgc3RhdGljIGdldCBXRUJQQUNLX0NPTkZJR19OQU1FKCkge3JldHVybiAnd2VicGFjay5jb25maWcuanMnOyB9XG5cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYW4gaW5zdGFuY2Ugb2Yge1BhY2thZ2V9LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfcm9vdEZvbGRlciBQYXRoIHRvIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGNvbnRhaW5pbmcgYSBwYWNrYWdlLmpzb24gZmlsZVxuICAgICAqIEBwYXJhbSB7UGFja2FnZX0gW19wYXJlbnRQYWNrYWdlXSBUaGUgcGFyZW50IHtQYWNrYWdlfSBpZiB0aGlzIHtQYWNrYWdlfSBpcyBhIHlhcm4gd29ya3NwYWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdEZvbGRlcjogc3RyaW5nLCBwcml2YXRlIF9wYXJlbnRQYWNrYWdlPzogUGFja2FnZSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQYXRoKHJvb3RGb2xkZXIpIHx8ICFmcy5zdGF0U3luYyhyb290Rm9sZGVyKS5pc0RpcmVjdG9yeSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFBhdGhJc05vdERpcmVjdG9yeShyb290Rm9sZGVyKTtcbiAgICAgICAgdGhpcy5yb290Rm9sZGVyID0gcGF0aC5yZXNvbHZlKHJvb3RGb2xkZXIpO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4ocm9vdEZvbGRlciwgUGFja2FnZS5QQUNLQUdFX05BTUUpO1xuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmModGhpcy5wYXRoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBOb1BhY2thZ2VKc29uKHRoaXMucGF0aCk7XG5cbiAgICAgICAgdGhpcy5wYWNrYWdlT2JqZWN0ID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmModGhpcy5wYXRoKSBhcyBhbnkpO1xuXG4gICAgICAgIGNvbnN0IHdlYnBhY2tDb25maWdQYXRoID0gcGF0aC5qb2luKHRoaXMucm9vdEZvbGRlciwgUGFja2FnZS5XRUJQQUNLX0NPTkZJR19OQU1FKTtcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMod2VicGFja0NvbmZpZ1BhdGgpKSB7XG4gICAgICAgICAgICB0aGlzLndlYnBhY2tDb25maWdQYXRoID0gd2VicGFja0NvbmZpZ1BhdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBwYWNrYWdlLmpzb25cbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFic29sdXRlIHBhdGggdG8gdGhlIGZvbGRlclxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgcm9vdEZvbGRlcjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFja2FnZS5qc29uIG9iamVjdFxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgcGFja2FnZU9iamVjdDogUGFja2FnZU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYXRoIHRvIHRoZSB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24sIGlmIGl0IGV4aXN0c1xuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICByZWFkb25seSB3ZWJwYWNrQ29uZmlnUGF0aD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCBwYWNrYWdlIGZvciB0aGlzIHlhcm4gd29ya3NwYWNlXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgcGFyZW50UGFja2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudFBhY2thZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhpcyBpcyB5YXJuIHdvcmtzcGFjZXMgcm9vdCBwYWNrYWdlXG4gICAgICpcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGhhc1dvcmtzcGFjZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhY2thZ2VPYmplY3Qud29ya3NwYWNlcyAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgcGFja2FnZSB1c2VzIHdlYnBhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgdXNlc1dlYnBhY2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlYnBhY2tDb25maWdQYXRoICE9PSB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl19