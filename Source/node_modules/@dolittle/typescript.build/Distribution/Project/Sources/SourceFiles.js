"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Dolittle. All rights reserved.
*  Licensed under the MIT License. See LICENSE in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const internal_1 = require("../../internal");
/**
 * Represents the source files
 *
 * @export
 * @class SourceFiles
 */
class SourceFiles {
    /**
     * Instantiates an instance of {SourceFiles}.
     * @param {string} _projectRootFolder
     * @param {YarnWorkspace[]} [_workspaces=[]]
     */
    constructor(_projectRootFolder, _rootPackage, _workspaces = []) {
        this._projectRootFolder = _projectRootFolder;
        this._rootPackage = _rootPackage;
        this._workspaces = _workspaces;
        this._underSourceFolder = false;
        this.root = this._projectRootFolder;
        const sourceFolder = path_1.default.resolve(this._projectRootFolder, SourceFiles.FOLDER_NAME);
        if (fs_1.default.existsSync(sourceFolder) && fs_1.default.statSync(sourceFolder).isDirectory()) {
            this._underSourceFolder = true;
            this.root = sourceFolder;
        }
        this.sourceFileGlobs = this.createSourceFileGlobs(...SourceFiles.sourceFilesGlobPatterns);
        this.staticSourceFileGlobs = this.createSourceFileGlobs(...internal_1.StaticFiles.staticSourceFilesGlobPatterns);
        this.testFileGlobs = this.createSourceFileGlobs(...SourceFiles.testFilesGlobPatterns);
        this.testSetupFileGlobs = this.createSourceFileGlobs(...SourceFiles.testSetupFilesGlobPatterns);
    }
    /**
     * The name that the Source folder should have, if any
     *
     * @readonly
     * @static
     */
    static get FOLDER_NAME() { return 'Source'; }
    /**
     * The list of valid source file extensions
     *
     * @readonly
     * @static
     */
    static get FILE_EXTENSIONS() { return ['ts', 'js']; }
    /**
     * Gets the relative patterns to exclude that are specific for webpack based on the project package
     *
     * @static
     * @param {Package} rootPackage
     * @returns
     */
    static getWebpackSpecificExcludes(rootPackage) {
        const excludes = [];
        if (rootPackage.usesWebpack()) {
            const outputFolder = path_1.default.basename(require(rootPackage.webpackConfigPath)().output.path);
            excludes.push(`${outputFolder}/**/*`, ...SourceFiles.webpackSpecificPatternsToExclude);
        }
        return excludes;
    }
    createSourceFileGlobs(...globPatterns) {
        const globs = {
            includes: [],
            excludes: []
        };
        if (this._workspaces.length > 0)
            this._workspaces.forEach(_ => {
                globs.includes.push(...internal_1.createGlobPatterns(_.sources.sourceFiles.root, globPatterns, _.sources.sourceFiles.root === this._projectRootFolder ? '' : slash_1.default(_.sources.sourceFiles.root.replace(`${this._projectRootFolder}${path_1.default.sep}`, ''))));
            });
        else
            globs.includes.push(...internal_1.createGlobPatterns(this.root, globPatterns, this._underSourceFolder === true ? SourceFiles.FOLDER_NAME : undefined));
        const excludePatterns = ['node_modules/**/*', '**/node_modules/**/*', ...SourceFiles.getWebpackSpecificExcludes(this._rootPackage), ...SourceFiles.filesToIgnore];
        excludePatterns.forEach(globPattern => {
            globs.excludes.push({ relative: globPattern, absolute: internal_1.globAsAbsoluteGlob(this._projectRootFolder, globPattern) });
        });
        return globs;
    }
}
exports.SourceFiles = SourceFiles;
/**
 * The patterns to exclude that are common to webpack projects
 *
 * @static
 */
SourceFiles.webpackSpecificPatternsToExclude = [
    'Configurations/**/*', 'Scripts/**/*'
];
/**
 * The list of files that should not be considered a part of the source files
 *
 * @static
 */
SourceFiles.filesToIgnore = [
    'wallaby.config.js', 'wallaby.conf.js', 'wallaby.js', 'Gulpfile.js', 'gulpfile.js', 'webpack.config.js', 'webpack.conf.js', 'webpack.js', 'webpack.prod.config.js', 'webpack.prod.conf.js', 'webpack.prod.js',
    'mocha.options.js', 'mocha.opts.js', 'mocha.js', 'run.js', 'nginx-default.conf', 'tsconfig.json', 'tsconfig.settings.json', 'package.json', 'package-lock.json', 'yarn.lock'
];
/**
 * The list of source file glob patterns
 *
 * @static
 */
SourceFiles.sourceFilesGlobPatterns = internal_1.toPatternsThatIgnoreNodeModules(`*${internal_1.asPossibleFileExtensionsPattern(SourceFiles.FILE_EXTENSIONS)}`);
/**
 * The list of test source file glob patterns
 *
 * @static
 */
SourceFiles.testFilesGlobPatterns = [
    ...internal_1.toPatternsThatIgnoreNodeModules(`for_*/**/!(given)/*${internal_1.asPossibleFileExtensionsPattern(SourceFiles.FILE_EXTENSIONS)}`),
    ...internal_1.toPatternsThatIgnoreNodeModules(`for_*/*${internal_1.asPossibleFileExtensionsPattern(SourceFiles.FILE_EXTENSIONS)}`)
];
/**
 * The list of test setup source file glob patterns
 *
 * @static
 */
SourceFiles.testSetupFilesGlobPatterns = [
    ...internal_1.toPatternsThatIgnoreNodeModules(`for_*/**/given/**/*${internal_1.asPossibleFileExtensionsPattern(SourceFiles.FILE_EXTENSIONS)}`)
];
//# sourceMappingURL=data:application/json;base64,