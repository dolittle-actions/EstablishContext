"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Dolittle. All rights reserved.
*  Licensed under the MIT License. See LICENSE in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const internal_1 = require("../../internal");
/**
 * Represents the files that are outputted
 *
 * @export
 * @class OutputFiles
 */
class OutputFiles {
    /**
     * Instantiates an instance of {OutputFiles}.
     * @param {string} _projectRootFolder
     * @param {YarnWorkspace[]} [_workspaces=[]]
     */
    constructor(_projectRootFolder, _workspaces = []) {
        this._projectRootFolder = _projectRootFolder;
        this._workspaces = _workspaces;
        this.root = this._workspaces.length > 0 ? undefined : path_1.default.join(this._projectRootFolder, OutputFiles.FOLDER_NAME);
        this.compiledFilesGlobs = this.createCompiledFileGlobs(...OutputFiles.compiledSourceFilesGlobPatterns);
        this.staticOutputFileGlobs = this.createCompiledFileGlobs(...internal_1.StaticFiles.staticOutputFilesGlobPatterns);
        this.declarationFilesGlobs = this.createCompiledFileGlobs(...OutputFiles.declarationFilesGlobPatterns);
        this.compiledTestsGlobs = this.createCompiledFileGlobs(...OutputFiles.compiledTestFilesGlobPatterns);
    }
    static get FOLDER_NAME() { return 'Distribution'; }
    createCompiledFileGlobs(...globPatterns) {
        const globs = {
            includes: [],
            excludes: []
        };
        if (this._workspaces.length > 0) {
            this._workspaces.forEach(_ => {
                globs.includes.push(...internal_1.createGlobPatterns(_.sources.outputFiles.root, globPatterns, _.sources.outputFiles.root === this._projectRootFolder ? '' : slash_1.default(_.sources.outputFiles.root.replace(`${this._projectRootFolder}${path_1.default.sep}`, ''))));
            });
        }
        else {
            globs.includes.push(...internal_1.createGlobPatterns(this.root, globPatterns, OutputFiles.FOLDER_NAME));
        }
        return globs;
    }
}
exports.OutputFiles = OutputFiles;
OutputFiles.declarationFilesGlobPatterns = ['**/*.d.ts'];
OutputFiles.compiledSourceFilesGlobPatterns = ['**/*.js'];
OutputFiles.compiledTestFilesGlobPatterns = ['**/for_*/**/!(given)/*.js', '**/for_*/*.js'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0cHV0RmlsZXMuanMiLCJzb3VyY2VSb290IjoiLi9Tb3VyY2UvIiwic291cmNlcyI6WyJQcm9qZWN0L1NvdXJjZXMvT3V0cHV0RmlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OytGQUcrRjtBQUMvRixnREFBd0I7QUFDeEIsa0RBQStCO0FBQy9CLDZDQUF1RjtBQUV2Rjs7Ozs7R0FLRztBQUNILE1BQWEsV0FBVztJQVFwQjs7OztPQUlHO0lBQ0gsWUFBb0Isa0JBQTBCLEVBQVUsY0FBK0IsRUFBRTtRQUFyRSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7UUFDckYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWxILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxXQUFXLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsc0JBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3hHLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxXQUFXLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsV0FBVyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDekcsQ0FBQztJQWxCRCxNQUFNLEtBQUssV0FBVyxLQUFLLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQztJQXdEM0MsdUJBQXVCLENBQUMsR0FBRyxZQUFzQjtRQUNyRCxNQUFNLEtBQUssR0FBVTtZQUNqQixRQUFRLEVBQUUsRUFBRTtZQUNaLFFBQVEsRUFBRSxFQUFFO1NBQ2YsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLDZCQUFrQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUssRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSyxLQUFLLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxjQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdlAsQ0FBQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyw2QkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSyxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUNqRztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7O0FBdkVMLGtDQXlFQztBQXJFVSx3Q0FBNEIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzdDLDJDQUErQixHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUMseUNBQTZCLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxlQUFlLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHRvVW5peFBhdGggZnJvbSAnc2xhc2gnO1xuaW1wb3J0IHsgWWFybldvcmtzcGFjZSwgR2xvYnMsIFN0YXRpY0ZpbGVzLCBjcmVhdGVHbG9iUGF0dGVybnMgfSBmcm9tICcuLi8uLi9pbnRlcm5hbCc7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZmlsZXMgdGhhdCBhcmUgb3V0cHV0dGVkXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIE91dHB1dEZpbGVzXG4gKi9cbmV4cG9ydCBjbGFzcyBPdXRwdXRGaWxlcyB7XG5cbiAgICBzdGF0aWMgZ2V0IEZPTERFUl9OQU1FKCkgeyByZXR1cm4gJ0Rpc3RyaWJ1dGlvbic7IH1cblxuICAgIHN0YXRpYyBkZWNsYXJhdGlvbkZpbGVzR2xvYlBhdHRlcm5zID0gWycqKi8qLmQudHMnXTtcbiAgICBzdGF0aWMgY29tcGlsZWRTb3VyY2VGaWxlc0dsb2JQYXR0ZXJucyA9IFsnKiovKi5qcyddO1xuICAgIHN0YXRpYyBjb21waWxlZFRlc3RGaWxlc0dsb2JQYXR0ZXJucyA9IFsnKiovZm9yXyovKiovIShnaXZlbikvKi5qcycsICcqKi9mb3JfKi8qLmpzJ107XG5cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYW4gaW5zdGFuY2Ugb2Yge091dHB1dEZpbGVzfS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3Byb2plY3RSb290Rm9sZGVyXG4gICAgICogQHBhcmFtIHtZYXJuV29ya3NwYWNlW119IFtfd29ya3NwYWNlcz1bXV1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9wcm9qZWN0Um9vdEZvbGRlcjogc3RyaW5nLCBwcml2YXRlIF93b3Jrc3BhY2VzOiBZYXJuV29ya3NwYWNlW10gPSBbXSkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLl93b3Jrc3BhY2VzLmxlbmd0aCA+IDAgPyB1bmRlZmluZWQgOiBwYXRoLmpvaW4odGhpcy5fcHJvamVjdFJvb3RGb2xkZXIsIE91dHB1dEZpbGVzLkZPTERFUl9OQU1FKTtcblxuICAgICAgICB0aGlzLmNvbXBpbGVkRmlsZXNHbG9icyA9IHRoaXMuY3JlYXRlQ29tcGlsZWRGaWxlR2xvYnMoLi4uT3V0cHV0RmlsZXMuY29tcGlsZWRTb3VyY2VGaWxlc0dsb2JQYXR0ZXJucyk7XG4gICAgICAgIHRoaXMuc3RhdGljT3V0cHV0RmlsZUdsb2JzID0gdGhpcy5jcmVhdGVDb21waWxlZEZpbGVHbG9icyguLi5TdGF0aWNGaWxlcy5zdGF0aWNPdXRwdXRGaWxlc0dsb2JQYXR0ZXJucyk7XG4gICAgICAgIHRoaXMuZGVjbGFyYXRpb25GaWxlc0dsb2JzID0gdGhpcy5jcmVhdGVDb21waWxlZEZpbGVHbG9icyguLi5PdXRwdXRGaWxlcy5kZWNsYXJhdGlvbkZpbGVzR2xvYlBhdHRlcm5zKTtcbiAgICAgICAgdGhpcy5jb21waWxlZFRlc3RzR2xvYnMgPSB0aGlzLmNyZWF0ZUNvbXBpbGVkRmlsZUdsb2JzKC4uLk91dHB1dEZpbGVzLmNvbXBpbGVkVGVzdEZpbGVzR2xvYlBhdHRlcm5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgb3V0cHV0IGZvbGRlciBvZiB0aGlzIHByb2plY3QuIElmIHRoaXMgcHJvamVjdCBoYXMgd29ya3NwYWNlcyB0aGlzIGZpZWxkIGlzIHVuZGVmaW5lZFxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgcm9vdD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBnbG9icyBmb3IgYWxsIHRoZSBjb21waWxlZCBmaWxlcyBpbiB0aGUgcHJvamVjdFxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcGlsZWRGaWxlc0dsb2JzOiBHbG9icztcblxuXG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JzIGZvciBhbGwgdGhlIHN0YXRpYyBvdXRwdXQgZmlsZXNcbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXRpY091dHB1dEZpbGVHbG9iczogR2xvYnM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ2xvYnMgZm9yIHRoZSBkZWNsYXJhdGlvbiBmaWxlcyBpbiB0aGUgcHJvamVjdFxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVjbGFyYXRpb25GaWxlc0dsb2JzOiBHbG9icztcblxuICAgIC8qKlxuICAgICAqIFRoZSBnbG9icyBmb3IgYWxsIGNvbXBpbGVkIHRlc3RzIGluIHRoZSBwcm9qZWN0LlxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcGlsZWRUZXN0c0dsb2JzOiBHbG9icztcblxuICAgIHByaXZhdGUgY3JlYXRlQ29tcGlsZWRGaWxlR2xvYnMoLi4uZ2xvYlBhdHRlcm5zOiBzdHJpbmdbXSkge1xuICAgICAgICBjb25zdCBnbG9iczogR2xvYnMgPSB7XG4gICAgICAgICAgICBpbmNsdWRlczogW10sXG4gICAgICAgICAgICBleGNsdWRlczogW11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlcy5mb3JFYWNoKF8gPT4ge1xuICAgICAgICAgICAgICAgIGdsb2JzLmluY2x1ZGVzLnB1c2goLi4uY3JlYXRlR2xvYlBhdHRlcm5zKF8uc291cmNlcy5vdXRwdXRGaWxlcy5yb290ISwgZ2xvYlBhdHRlcm5zLCBfLnNvdXJjZXMub3V0cHV0RmlsZXMucm9vdCEgPT09IHRoaXMuX3Byb2plY3RSb290Rm9sZGVyID8gJycgOiB0b1VuaXhQYXRoKF8uc291cmNlcy5vdXRwdXRGaWxlcy5yb290IS5yZXBsYWNlKGAke3RoaXMuX3Byb2plY3RSb290Rm9sZGVyfSR7cGF0aC5zZXB9YCwgJycpKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9icy5pbmNsdWRlcy5wdXNoKC4uLmNyZWF0ZUdsb2JQYXR0ZXJucyh0aGlzLnJvb3QhLCBnbG9iUGF0dGVybnMsIE91dHB1dEZpbGVzLkZPTERFUl9OQU1FKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdsb2JzO1xuICAgIH1cblxufVxuIl19