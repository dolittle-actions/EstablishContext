"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Dolittle. All rights reserved.
*  Licensed under the MIT License. See LICENSE in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const path_1 = __importDefault(require("path"));
const internal_1 = require("../../internal");
/**
 * Represents a project's sources
 *
 * @export
 * @class Sources
 */
class Sources {
    /**
     * Instantiates an instance of {Sources}.
     * @param {string} _rootFolder
     * @param {YarnWorkspace[]} [_workspaces=[]]
     */
    constructor(_rootFolder, _rootPackage, _workspaces = []) {
        this._rootFolder = _rootFolder;
        this._rootPackage = _rootPackage;
        this._workspaces = _workspaces;
        this.sourceFiles = new internal_1.SourceFiles(this._rootFolder, this._rootPackage, this._workspaces);
        this.outputFiles = new internal_1.OutputFiles(this._rootFolder, this._workspaces);
        this.tsConfig = this._workspaces.length > 0 ? undefined : path_1.default.join(this._rootFolder, 'tsconfig.json');
    }
    /**
     * The root folder
     *
     * @readonly
     */
    get root() {
        return this._rootFolder;
    }
}
exports.Sources = Sources;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU291cmNlcy5qcyIsInNvdXJjZVJvb3QiOiIuL1NvdXJjZS8iLCJzb3VyY2VzIjpbIlByb2plY3QvU291cmNlcy9Tb3VyY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OzsrRkFHK0Y7QUFDL0YsZ0RBQXdCO0FBQ3hCLDZDQUFrRjtBQUVsRjs7Ozs7R0FLRztBQUNILE1BQWEsT0FBTztJQUVoQjs7OztPQUlHO0lBQ0gsWUFBb0IsV0FBbUIsRUFBVSxZQUFxQixFQUFVLGNBQStCLEVBQUU7UUFBN0YsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBUztRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQUM3RyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksc0JBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxzQkFBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUUzRyxDQUFDO0lBdUJEOzs7O09BSUc7SUFDSCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDNUIsQ0FBQztDQUNKO0FBM0NELDBCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qICBDb3B5cmlnaHQgKGMpIERvbGl0dGxlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgWWFybldvcmtzcGFjZSwgU291cmNlRmlsZXMsIE91dHB1dEZpbGVzLCBQYWNrYWdlIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBwcm9qZWN0J3Mgc291cmNlc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBTb3VyY2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBTb3VyY2VzIHtcblxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhbiBpbnN0YW5jZSBvZiB7U291cmNlc30uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IF9yb290Rm9sZGVyXG4gICAgICogQHBhcmFtIHtZYXJuV29ya3NwYWNlW119IFtfd29ya3NwYWNlcz1bXV1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yb290Rm9sZGVyOiBzdHJpbmcsIHByaXZhdGUgX3Jvb3RQYWNrYWdlOiBQYWNrYWdlLCBwcml2YXRlIF93b3Jrc3BhY2VzOiBZYXJuV29ya3NwYWNlW10gPSBbXSkge1xuICAgICAgICB0aGlzLnNvdXJjZUZpbGVzID0gbmV3IFNvdXJjZUZpbGVzKHRoaXMuX3Jvb3RGb2xkZXIsIHRoaXMuX3Jvb3RQYWNrYWdlLCB0aGlzLl93b3Jrc3BhY2VzKTtcbiAgICAgICAgdGhpcy5vdXRwdXRGaWxlcyA9IG5ldyBPdXRwdXRGaWxlcyh0aGlzLl9yb290Rm9sZGVyLCB0aGlzLl93b3Jrc3BhY2VzKTtcbiAgICAgICAgdGhpcy50c0NvbmZpZyA9IHRoaXMuX3dvcmtzcGFjZXMubGVuZ3RoID4gMCA/IHVuZGVmaW5lZCA6IHBhdGguam9pbih0aGlzLl9yb290Rm9sZGVyLCAndHNjb25maWcuanNvbicpO1xuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSB0c2NvbmZpZyBvZiB0aGlzIHByb2plY3QuIElmIHRoaXMgcHJvamVjdCBoYXMgd29ya3NwYWNlcyB0aGlzIGZpZWxkIGlzIHVuZGVmaW5lZFxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcmVhZG9ubHkgdHNDb25maWc/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc291cmNlIGZpbGVzXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U291cmNlRmlsZXN9XG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlRmlsZXM6IFNvdXJjZUZpbGVzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBmaWxlc1xuICAgICAqXG4gICAgICogQHR5cGUge091dHB1dEZpbGVzfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IG91dHB1dEZpbGVzOiBPdXRwdXRGaWxlcztcblxuXG4gICAgLyoqXG4gICAgICogVGhlIHJvb3QgZm9sZGVyXG4gICAgICpcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgcm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RGb2xkZXI7XG4gICAgfVxufVxuIl19