"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Dolittle. All rights reserved.
*  Licensed under the MIT License. See LICENSE in the project root for license information.
*--------------------------------------------------------------------------------------------*/
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const is_glob_1 = __importDefault(require("is-glob"));
const fs_1 = __importDefault(require("fs"));
const internal_1 = require("../internal");
/**
 * Represents a project
 *
 * @export
 * @class Project
 */
class Project {
    /**
     * Instantiates an instance of {Project}.
     * @param {string} [root] The root folder of the project
     */
    constructor(root) {
        this._workspaces = [];
        this.root = root !== undefined ? path_1.default.resolve(root) : process.cwd();
        this.rootPackage = new internal_1.Package(this.root);
        this.tsLint = fs_1.default.existsSync(path_1.default.join(this.root, 'tslint.json')) ?
            path_1.default.join(this.root, 'tslint.json')
            : path_1.default.join(this.root, 'node_modules', '@dolittle', 'typescript.build', 'TSConfig', 'tslint.json');
        if (this.rootPackage.hasWorkspaces()) {
            this.createWorkspaces();
        }
        this.sources = new internal_1.Sources(this.root, this.rootPackage, this._workspaces);
    }
    /**
     * Gets the {YarnWorkspace} configuration for each yarn workspace in the project
     *
     * @readonly
     */
    get workspaces() {
        return this._workspaces;
    }
    /**
     * Whether or not this project has yarn workspaces
     *
     * @returns
     */
    hasWorkspaces() {
        return this._workspaces !== undefined && this._workspaces.length > 0;
    }
    createWorkspaces() {
        this._workspaces = [];
        const rootPackageObject = this.rootPackage.packageObject;
        rootPackageObject.workspaces.forEach(workspace => {
            if (is_glob_1.default(workspace)) {
                glob_1.default.sync(workspace, { absolute: true, }).forEach(workspacePath => {
                    try {
                        if (fs_1.default.statSync(workspacePath).isDirectory()) {
                            const workspacePackage = new internal_1.Package(workspacePath, this.rootPackage);
                            const workspaceSources = new internal_1.Sources(workspacePackage.rootFolder, workspacePackage);
                            this._workspaces.push(new internal_1.YarnWorkspace(workspacePackage, workspaceSources, this.tsLint));
                        }
                    }
                    catch (error) {
                        throw new internal_1.InvalidYarnWorkspace(workspacePath, error);
                    }
                });
            }
            else {
                try {
                    if (fs_1.default.statSync(workspace).isDirectory()) {
                        const workspacePackage = new internal_1.Package(workspace, this.rootPackage);
                        const workspaceSources = new internal_1.Sources(workspacePackage.rootFolder, workspacePackage);
                        this._workspaces.push(new internal_1.YarnWorkspace(workspacePackage, workspaceSources, this.tsLint));
                    }
                }
                catch (error) {
                    throw new internal_1.InvalidYarnWorkspace(workspace, error);
                }
            }
        });
    }
}
exports.Project = Project;
//# sourceMappingURL=data:application/json;base64,