{"version":3,"file":"InitialState.js","sourceRoot":"","sources":["../../../src/states/InitialState.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextState, PropertyKey } from './ContextState';\r\nimport { Context } from '../Context';\r\nimport { GetPropertyState } from './GetPropertyState';\r\nimport { SetPropertyState } from './SetPropertyState';\r\nimport { SubstituteMethods, Call, PropertyType } from '../Utilities';\r\nimport { AreProxiesDisabledKey } from '../Substitute';\r\nimport { SubstituteException } from '../SubstituteBase';\r\n\r\nexport class InitialState implements ContextState {\r\n    private recordedGetPropertyStates: Map<PropertyKey, GetPropertyState>;\r\n    private recordedSetPropertyStates: SetPropertyState[];\r\n\r\n    private _expectedCount: number | undefined | null;\r\n    private _areProxiesDisabled: boolean;\r\n\r\n    public get expectedCount(): number | undefined | null {\r\n        return this._expectedCount;\r\n    }\r\n\r\n    public get hasExpectations(): boolean {\r\n        return this._expectedCount !== void 0;\r\n    }\r\n\r\n    public get setPropertyStates(): SetPropertyState[] {\r\n        return [...this.recordedSetPropertyStates];\r\n    }\r\n\r\n    public get getPropertyStates(): GetPropertyState[] {\r\n        return [...this.recordedGetPropertyStates.values()];\r\n    }\r\n\r\n    public recordGetPropertyState(property: PropertyKey, getState: GetPropertyState): void {\r\n        this.recordedGetPropertyStates.set(property, getState);\r\n    }\r\n\r\n    public recordSetPropertyState(setState: SetPropertyState): void {\r\n        this.recordedSetPropertyStates.push(setState);\r\n    }\r\n\r\n    constructor() {\r\n        this.recordedGetPropertyStates = new Map();\r\n        this.recordedSetPropertyStates = [];\r\n\r\n        this._areProxiesDisabled = false;\r\n        this._expectedCount = void 0;\r\n    }\r\n\r\n    public assertCallCountMatchesExpectations(\r\n        receivedCalls: Call[],\r\n        receivedCount: number,\r\n        type: PropertyType,\r\n        propertyValue: PropertyKey,\r\n        args: any[]\r\n    ): void | never {\r\n        const expectedCount = this._expectedCount;\r\n\r\n        this.clearExpectations();\r\n        if (this.doesCallCountMatchExpectations(expectedCount, receivedCount))\r\n            return;\r\n\r\n        const callCount = { expected: expectedCount, received: receivedCount };\r\n        const property = { type, value: propertyValue };\r\n        const calls = { expectedArguments: args, received: receivedCalls };\r\n\r\n        throw SubstituteException.forCallCountMissMatch(callCount, property, calls);\r\n    }\r\n\r\n    private doesCallCountMatchExpectations(expectedCount: number | undefined | null, actualCount: number) {\r\n        if (expectedCount === void 0)\r\n            return true;\r\n\r\n        if (expectedCount === null && actualCount > 0)\r\n            return true;\r\n\r\n        return expectedCount === actualCount;\r\n    }\r\n\r\n    apply(context: Context, args: any[]) { }\r\n\r\n    set(context: Context, property: PropertyKey, value: any) {\r\n        if (property === AreProxiesDisabledKey) {\r\n            this._areProxiesDisabled = value;\r\n            return;\r\n        }\r\n\r\n        const existingSetState = this.recordedSetPropertyStates.find(x => x.arguments[0] === value);\r\n        if (existingSetState) {\r\n            return existingSetState.set(context, property, value);\r\n        }\r\n\r\n        const setPropertyState = new SetPropertyState(property, value);\r\n        this.recordedSetPropertyStates.push(setPropertyState);\r\n\r\n        context.state = setPropertyState;\r\n        return context.setStateSet(context, property, value);\r\n    }\r\n\r\n    get(context: Context, property: PropertyKey) {\r\n        switch (property) {\r\n            case AreProxiesDisabledKey:\r\n                return this._areProxiesDisabled;\r\n            case SubstituteMethods.received:\r\n                return (count?: number) => {\r\n                    this._expectedCount = count ?? null;\r\n                    return context.receivedProxy;\r\n                };\r\n            case SubstituteMethods.didNotReceive:\r\n                return () => {\r\n                    this._expectedCount = 0;\r\n                    return context.receivedProxy;\r\n                };\r\n            default:\r\n                return this.handleGet(context, property);\r\n        }\r\n    }\r\n\r\n    private clearExpectations() {\r\n        this._expectedCount = void 0;\r\n    }\r\n\r\n    onSwitchedTo() {\r\n        this.clearExpectations();\r\n    }\r\n\r\n    public handleGet(context: Context, property: PropertyKey) {\r\n        const existingGetState = this.getPropertyStates.find(state => state.property === property);\r\n        if (existingGetState !== void 0) {\r\n            context.state = existingGetState;\r\n            return context.getStateGet(void 0, property);\r\n        }\r\n\r\n        const getState = new GetPropertyState(property);\r\n        this.recordGetPropertyState(property, getState);\r\n\r\n        context.state = getState;\r\n        return context.getStateGet(void 0, property);\r\n    }\r\n}"]}