{"version":3,"file":"SetPropertyState.js","sourceRoot":"","sources":["../../../src/states/SetPropertyState.ts"],"names":[],"mappings":";;;AAEA,4CAA+D;AAC/D,sDAAwD;AAExD,MAAa,gBAAgB;IAgBzB,YAAoB,SAAsB,EAAE,GAAG,IAAW;QAAtC,cAAS,GAAT,SAAS,CAAa;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;IAfD,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAOD,KAAK,CAAC,OAAgB;QAClB,MAAM,oCAAmB,CAAC,OAAO,CAAC,iFAAiF,CAAC,CAAC;IACzH,CAAC;IAED,GAAG,CAAC,OAAgB,EAAE,QAAqB,EAAE,KAAU;QACnD,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC;QAC7D,IAAI,eAAe,EAAE;YACjB,SAAS,GAAG,OAAO,CAAC,YAAY;iBAC3B,iBAAiB;iBACjB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,6BAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;iBACrD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;iBACtB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;SACnC;QAED,OAAO,CAAC,YAAY,CAAC,kCAAkC,CACnD,CAAC,EAAE,CAAC,EACJ,SAAS,EACT,wBAAY,CAAC,QAAQ,EACrB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,CACjB,CAAC;QAEF,IAAI,CAAC,eAAe,EAAE;YAClB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAED,GAAG,CAAC,OAAgB,EAAE,QAAqB;QACvC,MAAM,oCAAmB,CAAC,OAAO,CAAC,+EAA+E,CAAC,CAAC;IACvH,CAAC;CACJ;AApDD,4CAoDC","sourcesContent":["import { ContextState, PropertyKey } from './ContextState';\nimport { Context } from '../Context';\nimport { areArgumentsEqual, PropertyType } from '../Utilities';\nimport { SubstituteException } from '../SubstituteBase';\n\nexport class SetPropertyState implements ContextState {\n    private _callCount: number;\n    private _arguments: any[];\n\n    public get arguments() {\n        return this._arguments;\n    }\n\n    public get property() {\n        return this._property;\n    }\n\n    public get callCount() {\n        return this._callCount;\n    }\n\n    constructor(private _property: PropertyKey, ...args: any[]) {\n        this._arguments = args;\n        this._callCount = 0;\n    }\n\n    apply(context: Context): undefined {\n        throw SubstituteException.generic('Calling apply of setPropertyState is not normal behaviour, something went wrong');\n    }\n\n    set(context: Context, property: PropertyKey, value: any) {\n        let callCount = this._callCount;\n        const hasExpectations = context.initialState.hasExpectations;\n        if (hasExpectations) {\n            callCount = context.initialState\n                .setPropertyStates\n                .filter(x => areArgumentsEqual(x.arguments[0], value))\n                .map(x => x._callCount)\n                .reduce((a, b) => a + b, 0);\n        }\n\n        context.initialState.assertCallCountMatchesExpectations(\n            [[]],\n            callCount,\n            PropertyType.property,\n            this.property,\n            this.arguments\n        );\n\n        if (!hasExpectations) {\n            this._callCount++;\n        }\n    }\n\n    get(context: Context, property: PropertyKey): undefined {\n        throw SubstituteException.generic('Calling get of setPropertyState is not normal behaviour, something went wrong');\n    }\n}"]}