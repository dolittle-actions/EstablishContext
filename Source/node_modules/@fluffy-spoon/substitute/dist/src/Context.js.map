{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../src/Context.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from 'util'\r\nimport { ContextState } from './states/ContextState';\r\nimport { InitialState } from './states/InitialState';\r\nimport { HandlerKey } from './Substitute';\r\nimport { PropertyType } from './Utilities';\r\nimport { SetPropertyState } from './states/SetPropertyState';\r\nimport { SubstituteJS as SubstituteBase, SubstituteException } from './SubstituteBase'\r\n\r\nexport class Context {\r\n    private _initialState: InitialState;\r\n\r\n    private _proxy: any;\r\n    private _rootProxy: any;\r\n    private _receivedProxy: any;\r\n\r\n    private _getState: ContextState;\r\n    private _setState: ContextState;\r\n    private _receivedState: ContextState;\r\n\r\n    constructor() {\r\n        this._initialState = new InitialState();\r\n        this._setState = this._initialState;\r\n        this._getState = this._initialState;\r\n\r\n        this._proxy = new Proxy(SubstituteBase, {\r\n            apply: (_target, _this, args) => this.getStateApply(_target, _this, args),\r\n            set: (_target, property, value) => (this.setStateSet(_target, property, value), true),\r\n            get: (_target, property) => this._filterAndReturnProperty(_target, property, this.getStateGet)\r\n        });\r\n\r\n        this._rootProxy = new Proxy(SubstituteBase, {\r\n            apply: (_target, _this, args) => this.initialState.apply(this, args),\r\n            set: (_target, property, value) => (this.initialState.set(this, property, value), true),\r\n            get: (_target, property) => this._filterAndReturnProperty(_target, property, this.rootGet)\r\n        });\r\n\r\n        this._receivedProxy = new Proxy(SubstituteBase, {\r\n            apply: (_target, _this, args) => this._receivedState === void 0 ? void 0 : this._receivedState.apply(this, args),\r\n            set: (_target, property, value) => (this.setStateSet(_target, property, value), true),\r\n            get: (_target, property) => {\r\n                const state = this.initialState.getPropertyStates.find(getPropertyState => getPropertyState.property === property);\r\n                if (state === void 0) return this.handleNotFoundState(property);\r\n                if (!state.isFunctionState)\r\n                    state.get(this, property);\r\n                this._receivedState = state;\r\n                return this.receivedProxy;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _filterAndReturnProperty(target: typeof SubstituteBase, property: PropertyKey, getToExecute: ContextState['get']) {\r\n        switch (property) {\r\n            case 'constructor':\r\n            case 'valueOf':\r\n            case '$$typeof':\r\n            case 'length':\r\n            case 'toString':\r\n            case 'inspect':\r\n            case 'lastRegisteredSubstituteJSMethodOrProperty':\r\n                return target.prototype[property];\r\n            case Symbol.toPrimitive:\r\n                return target.prototype[Symbol.toPrimitive];\r\n            case inspect.custom:\r\n                return target.prototype[inspect.custom];\r\n            case Symbol.iterator:\r\n                return target.prototype[Symbol.iterator];\r\n            case Symbol.toStringTag:\r\n                return target.prototype[Symbol.toStringTag];\r\n            default:\r\n                target.prototype.lastRegisteredSubstituteJSMethodOrProperty = property.toString()\r\n                return getToExecute.bind(this)(target as any, property);\r\n        }\r\n    }\r\n\r\n    private handleNotFoundState(property: PropertyKey) {\r\n        if (this.initialState.hasExpectations && this.initialState.expectedCount !== null) {\r\n            this.initialState.assertCallCountMatchesExpectations([], 0, PropertyType.property, property, []);\r\n            return this.receivedProxy;\r\n        }\r\n        throw SubstituteException.forPropertyNotMocked(property);\r\n    }\r\n\r\n    rootGet(_target: any, property: PropertyKey) {\r\n        return this.initialState.get(this, property);\r\n    }\r\n\r\n    getStateApply(_target: any, _this: any, args: any[]) {\r\n        return this._getState.apply(this, args);\r\n    }\r\n\r\n    setStateSet(_target: any, property: PropertyKey, value: any) {\r\n        return this._setState.set(this, property, value);\r\n    }\r\n\r\n    getStateGet(_target: any, property: PropertyKey) {\r\n        if (property === HandlerKey) {\r\n            return this;\r\n        }\r\n\r\n        return this._getState.get(this, property);\r\n    }\r\n\r\n    public get proxy() {\r\n        return this._proxy;\r\n    }\r\n\r\n    public get rootProxy() {\r\n        return this._rootProxy;\r\n    }\r\n\r\n    public get receivedProxy() {\r\n        return this._receivedProxy;\r\n    }\r\n\r\n    public get initialState() {\r\n        return this._initialState;\r\n    }\r\n\r\n    public set state(state: ContextState) {\r\n        if (this._setState === state)\r\n            return;\r\n\r\n        state instanceof SetPropertyState ?\r\n            this._setState = state : this._getState = state\r\n        if (state.onSwitchedTo)\r\n            state.onSwitchedTo(this);\r\n    }\r\n}"]}